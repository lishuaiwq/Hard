long long fun(int n)
{
     if (n == 0)
          return 0;
     if (n == 1)
          return 1;
     if (s[n]==-1)
         s[n]=fun(n - 1) + fun(n -2);
     return s[n];
}//自上而下的解决斐波那契额数列，记忆化搜索

int fun(int n)
{
     vector<int> num(n + 1, -1);
     num[0] = 0;
     num[1] = 1;
     for (int i = 2; i <= n; i++)
          num[i] = num[i - 1] + num[i - 2];
     return num[n];
}//动态规划自底向上解决问题
4.假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

int climbStairs(int n)
    {
        vector<int> s(n+1,-1);
         s[0]=1;
         s[1]=1;
         s[2]=2;
        for(int i=3;i<=n;i++)
            s[i]=s[i-1]+s[i-2];
        return s[n];
    }